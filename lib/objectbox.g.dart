// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'Meeting.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 5329076584521845904),
      name: 'Meeting',
      lastPropertyId: const IdUid(11, 7485288842403939975),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7255199131252079177),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6849898146209921340),
            name: 'subject',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6643109235732404290),
            name: 'meetingId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3001951955839611031),
            name: 'location',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6728044051646973748),
            name: 'date',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6312732186067315688),
            name: 'time',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5024634989496761207),
            name: 'category',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7404951407635889383),
            name: 'participantsCount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8963886658065457979),
            name: 'agenda',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7485288842403939975),
            name: 'participantsSerialized',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 5329076584521845904),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [2845364285306612577],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Meeting: EntityDefinition<Meeting>(
        model: _entities[0],
        toOneRelations: (Meeting object) => [],
        toManyRelations: (Meeting object) => {},
        getId: (Meeting object) => object.id,
        setId: (Meeting object, int id) {
          object.id = id;
        },
        objectToFB: (Meeting object, fb.Builder fbb) {
          final subjectOffset = fbb.writeString(object.subject);
          final meetingIdOffset = fbb.writeString(object.meetingId);
          final locationOffset = fbb.writeString(object.location);
          final dateOffset = fbb.writeString(object.date);
          final timeOffset = fbb.writeString(object.time);
          final categoryOffset = fbb.writeString(object.category);
          final agendaOffset = fbb.writeString(object.agenda);
          final participantsSerializedOffset =
              fbb.writeString(object.participantsSerialized);
          fbb.startTable(12);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, subjectOffset);
          fbb.addOffset(2, meetingIdOffset);
          fbb.addOffset(3, locationOffset);
          fbb.addOffset(4, dateOffset);
          fbb.addOffset(5, timeOffset);
          fbb.addOffset(6, categoryOffset);
          fbb.addInt64(7, object.participantsCount);
          fbb.addOffset(8, agendaOffset);
          fbb.addOffset(10, participantsSerializedOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Meeting(
              subject: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              meetingId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              location: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              date: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              time: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              category: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              participantsCount:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              agenda: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..participantsSerialized =
                const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, '');

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Meeting] entity fields to define ObjectBox queries.
class Meeting_ {
  /// see [Meeting.id]
  static final id = QueryIntegerProperty<Meeting>(_entities[0].properties[0]);

  /// see [Meeting.subject]
  static final subject =
      QueryStringProperty<Meeting>(_entities[0].properties[1]);

  /// see [Meeting.meetingId]
  static final meetingId =
      QueryStringProperty<Meeting>(_entities[0].properties[2]);

  /// see [Meeting.location]
  static final location =
      QueryStringProperty<Meeting>(_entities[0].properties[3]);

  /// see [Meeting.date]
  static final date = QueryStringProperty<Meeting>(_entities[0].properties[4]);

  /// see [Meeting.time]
  static final time = QueryStringProperty<Meeting>(_entities[0].properties[5]);

  /// see [Meeting.category]
  static final category =
      QueryStringProperty<Meeting>(_entities[0].properties[6]);

  /// see [Meeting.participantsCount]
  static final participantsCount =
      QueryIntegerProperty<Meeting>(_entities[0].properties[7]);

  /// see [Meeting.agenda]
  static final agenda =
      QueryStringProperty<Meeting>(_entities[0].properties[8]);

  /// see [Meeting.participantsSerialized]
  static final participantsSerialized =
      QueryStringProperty<Meeting>(_entities[0].properties[9]);
}
